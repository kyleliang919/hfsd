import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import hf_speculative_decoding

target_model_name = "meta-llama/Llama-3.2-3B-Instruct"
target = AutoModelForCausalLM.from_pretrained(target_model_name, torch_dtype=torch.bfloat16, device_map="auto")

drafter_model_name = "meta-llama/Llama-3.2-1B-Instruct"
drafter = AutoModelForCausalLM.from_pretrained(drafter_model_name, torch_dtype=torch.bfloat16, device_map="auto")

# Don't forget to load the tokenizer
tokenizer = AutoTokenizer.from_pretrained(target_model_name)

messages = [
    {"role": "system", "content": "You are a helpful assistant"},
    {"role": "user", "content": "Translate to English: Je m'appelle Romain. N'hésitez pas à contribuer à mon projet !"},
]

input_text = tokenizer.apply_chat_template(messages, add_generation_prompt=True, tokenize = False)
inputs = tokenizer(input_text, return_tensors = "pt")

from hf_speculative_decoding import NucleusProcessor

# Parameters
gen_len = 100       # Maximum number of tokens generated (could over pass when using speculative decoding)
gamma = 4           # Number of drafts generated by the drafter model at each step
logits_processor = NucleusProcessor(temperature=.6, top_p=.9) # Nucleus sampling with p=0.9 and T=0.6

output = target.generate(**inputs, max_new_tokens=30, use_cache = True)
print("Target decoding:", tokenizer.decode(output[0], skip_special_tokens=True))

output = drafter.generate(**inputs, max_new_tokens=30, use_cache = True)
print("Drafter decoding:", tokenizer.decode(output[0], skip_special_tokens=True))

# Generate text using the speculative decoding (faster)
output_ids_sd, alpha = target.speculative_generate(
                inputs,
                drafter,
                logits_processor=logits_processor,
                gamma=gamma,
                max_new_tokens=gen_len,
                tokenizer = tokenizer,
                use_cache = True
            )
output_sd = tokenizer.decode(output_ids_sd, skip_special_tokens=True)
print("Speculative decoding:", output_sd)
print("Acceptance rate:", alpha) # Number of drafts accepted by the target model divided by the number of drafts generated